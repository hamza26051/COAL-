INCLUDE Irvine32.inc

.data
	employee_count = 5
	buffer_size = 20

	ids DWORD employee_count DUP(?)
	names BYTE employee_count * buffer_size DUP(0)
	birth_year DWORD employee_count DUP(?)
	annual_salary DWORD employee_count DUP(?)

	prompt_id BYTE "Enter Employee ID: ", 0
	prompt_name BYTE "Enter Employee Name: ", 0
	prompt_birth BYTE "Enter Year of Birth: ", 0
	prompt_salary BYTE "Enter Annual Salary: ", 0
	prompt_total BYTE "Total Annual Salary: ", 0

.code

space proc uses eax
	push eax
	mov eax, 32
	call writechar
	pop eax
	ret
space endp

read_name proc uses edx ecx edi
	push edx
	push ecx
	push edi

	mov edx, offset names
	mov edi, esi
	imul edi, buffer_size
	add edx, edi
	mov ecx, buffer_size
	call readstring

	pop edi
	pop ecx
	pop edx
	ret
read_name endp

main proc
	mov ecx, employee_count
	mov esi, 0

input:
	; prompt for employee id
	mov edx, offset prompt_id
	call writestring
	call readint
	mov ids[esi * TYPE ids], eax

	; prompt for employee name
	mov edx, offset prompt_name
	call writestring
	call read_name

	; prompt for birth year
	mov edx, offset prompt_birth
	call writestring
	call readint
	mov birth_year[esi * TYPE birth_year], eax

	; prompt for annual salary
	mov edx, offset prompt_salary
	call writestring
	call readint
	mov annual_salary[esi * TYPE annual_salary], eax

	inc esi
	loop input

	mov ecx, employee_count
	mov esi, 0
output:
	; writing id
	mov eax, ids[esi * TYPE ids]
	call writedec
	call space

	; writing name
	mov edx, offset names
	mov edi, esi
	imul edi, buffer_size
	add edx, edi
	call writestring
	call space

	; writing birth year
	mov eax, birth_year[esi * TYPE birth_year]
	call writedec
	call space

	; writing salary
	mov eax, annual_salary[esi * TYPE annual_salary]
	call writedec
	call crlf

	inc esi
	loop output
	
	mov ecx, lengthof annual_salary
	mov esi, 0
	mov eax, 0
total:
	add eax, annual_salary[esi * TYPE annual_salary]
	inc esi
	loop total

	call crlf
	mov edx, offset prompt_total
	call writestring
	call writedec

	exit
main endp
end main
